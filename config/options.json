{
    "__app__": {
        "info": "Python wrapper for git. It applies a git workflow close to GitFlow model from nvie.com. It uses semantic versioning 2.0.0"
    },
    "add_origin": {
        "args": "sync",
        "info": "add path to origin",
        "nested": true
    },
    "automated_new_project": {
        "aliases": "--automated-new-project,--anp",
        "info": "Create a  new project using the processor engine. It avoids having to type multiple times the same entry.",
        "show": false
    },
    "close_branch": {
        "aliases": "-c,--close-branch,--cb",
        "info": "close current working branch"
    },
    "clone_to_directory": {
        "aliases": "--clone-to-directory,--ctd",
        "args": "directory",
        "required": "directory",
        "nvalues": "*",
        "values": "PATH"
    },
    "clone_to_repository": {
        "aliases": "--clone-to-repository,--ctr",
        "args": "repository",
        "required": "repository",
        "nvalues": "*",
        "values": "PATH"
    },
    "clone_project_to_remote": {
        "aliases": "--clone-project-to-remote,--cp,--cptr",
        "info": "clone Project directory to Remote Repository",
        "show": false
    },
    "debug": {
        "aliases": "--debug,-d",
        "info": "debug mode in order to display all processing steps. Mainly use for testing",
        "show": false
    },
    "deploy_args": {
        "aliases": "--deploy-args,--da",
        "info": "This parameter can be added to --close-branch for hotfix branch type only. It can also be added to --pick-up-release. The arguments are going to be send to the script deploy",
        "nvalues": "*",
        "show": false,
        "values": "RELEASE_NUMBER"
    },
    "directory": {
        "args": "package,add_origin",
        "nested": true,
        "values": "PATH"
    },
    "disable_validator": {
        "aliases": "--disable-validator,--dv",
        "info": "disable gitframe validator. This function should be used only to test and write the deploy_release script. For instance: gitframe --dv --pr v1.0.0"
    },
    "email": {
        "nested": true,
        "values": "EMAIL"
    },
    "examples": {},
    "index": {
        "info": "Repository Index For multiple package with same name. If index is not given, then index is 1",
        "nested": true
    },
    "init": {
        "args": "email,username",
        "info": "Init directories. Add master and develop branches, set username and email",
        "nvalues": "*",
        "values": "PATH"
    },
    "new_project": {
        "aliases": "-n,--new-project,--np",
        "info": "create a new git project. Use relative path or Full Path, existing or not",
        "nvalues": "?",
        "values": "PATH"
    },
    "open_branch": {
        "aliases": "-o,--open-branch,--ob",
        "info": "open branch Feature"
    },
    "package": {
        "nested": true,
        "values": "NAME"
    },
    "project": {
        "nested": true,
        "nvalues": "1",
        "values": "PATH"
    },
    "pick_up_release": {
        "aliases": "--pick-up-release,--pr,--pur",
        "info": "select a tag to pick up a release version from. ex: 1.0.0",
        "nvalues": "?",
        "show": false,
        "values": "RELEASE_NUMBER"
    },
    "repository": {
        "args": "add_origin,index,package",
        "info": "Create path with PATH/first_letter_package/package/index/diren.git. ex: /data/git/a/accessibility/1/src.git",
        "nested": true,
        "required": "package",
        "values": "PATH"
    },
    "set_origin": {
        "args": "project,sync",
        "info": "Set given path as origin to project. If no project selected then current path is consider the project",
        "values": "PATH.git"
    },
    "synchronize_project": {
        "aliases": "-s,--synchronize-project,--sp",
        "info": "branching model validator is applied and all branches are synchronized"
    },
    "sync": {
        "info": "Push select branches from project to origin. If no branches are selected then all branches are sent.",
        "nested": true,
        "nvalues": "*",
        "values": "BRANCHES"
    },
    "tag": {
        "args": "version_file",
        "info": "Create a git version tag. If no tag is given then a version file path has to be provided.",
        "nvalues": "?",
        "values": "TAG"
    },
    "test": {
        "aliases": "-t,--test",
        "info": "launch tests. Tests are by default in debug mode. select Mode is either 'local_path' or 'ssh_url'. 'ssh_url' mode mocks a ssh server on local.",
        "show": false,
        "values": "MODE"
    },
    "update_branch": {
        "aliases": "-u,--update-branch,--ub",
        "info": "if active branch has a linked branch, then depending on circumstances, linked branch is merged into active branch"
    },
    "update_gitframe": {
        "aliases": "--update-gitframe,--ug",
        "info": "this is for gitframe developers only. This command is needed in order to allow development on gitframe with gitframe. It copies the src code to a temporary folder and execute gitframe from this folder with the remaining parameters. ex: ./gitframe.py --ug=\"--pr\" will execute /tmp/test-gf/bin/gitframe.py --pr. NOTE: --test command does not need --update_gitframe and it must be executed from the main source code.",
        "nvalues": "?",
        "values": "PARAMETERS"
    },
    "username": {
        "nested": true,
        "values": "NAME"
    },
    "version_file": {
        "info": "Can a json file with a 'version' key or a text file with version as first line",
        "nested": true,
        "values": "PATH"
    }
}